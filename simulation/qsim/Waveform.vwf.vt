// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/23/2025 01:44:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in;
reg [7:0] data_in;
reg reset_in;
// wires                                               
wire [7:0] out_0;
wire [7:0] out_1;
wire [7:0] out_2;
wire [7:0] out_3;
wire out_valid_0;
wire out_valid_1;
wire out_valid_2;
wire out_valid_3;

// assign statements (if any)                          
test_module i1 (
// port map - connection between master ports and signals/registers   
	.clk_in(clk_in),
	.data_in(data_in),
	.out_0(out_0),
	.out_1(out_1),
	.out_2(out_2),
	.out_3(out_3),
	.out_valid_0(out_valid_0),
	.out_valid_1(out_valid_1),
	.out_valid_2(out_valid_2),
	.out_valid_3(out_valid_3),
	.reset_in(reset_in)
);
initial 
begin 
#1000000 $finish;
end 

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #10000 1'b1;
	#10000;
end 

// reset_in
initial
begin
	reset_in = 1'b1;
	reset_in = #120000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #140000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #20000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #120000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #20000 1'b0;
end 
endmodule

